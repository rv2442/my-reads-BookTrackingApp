{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Rahul\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar api = \"https://reactnd-books-api.udacity.com\";\n/* Generate a unique token for storing your bookshelf data on the backend server. */\n\nvar token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n/* headers */\n\nvar headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n  /* get */\n\n};\nexport var get = function get(bookId) {\n  return fetch(\"\".concat(api, \"/books/\").concat(bookId), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.book;\n  });\n};\n/* getAll */\n\nexport var getAll = function getAll() {\n  return fetch(\"\".concat(api, \"/books\"), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.books;\n  });\n};\n/* update */\n\nexport var update = function update(book, shelf) {\n  return fetch(\"\".concat(api, \"/books/\").concat(book.id), {\n    method: 'PUT',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      shelf: shelf\n    })\n  }).then(function (res) {\n    return res.json();\n  });\n};\n/* search */\n\nexport var search = function search(query) {\n  return fetch(\"\".concat(api, \"/search\"), {\n    method: 'POST',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      query: query\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.books;\n  });\n};","map":{"version":3,"sources":["C:\\Users\\Rahul\\OneDriveSky\\Desktop\\PROJ FILES\\OLX\\BookTrackingApp\\src\\BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query"],"mappings":";AAAA,IAAMA,GAAG,GAAG,uCAAZ;AAGA;;AACA,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAzB;AACA,IAAI,CAACA,KAAL,EACIA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAC,CAAnC,CAA7B;AAEJ;;AACA,IAAMC,OAAO,GAAG;AACZ,YAAU,kBADE;AAEZ,mBAAiBN;AAGrB;;AALgB,CAAhB;AAMA,OAAO,IAAMO,GAAG,GAAG,SAANA,GAAM,CAACC,MAAD;AAAA,SACfC,KAAK,WAAIV,GAAJ,oBAAiBS,MAAjB,GAA2B;AAAEF,IAAAA,OAAO,EAAPA;AAAF,GAA3B,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADT,EAECF,IAFD,CAEM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACC,IAAT;AAAA,GAFV,CADe;AAAA,CAAZ;AAKP;;AACA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SAClBN,KAAK,WAAIV,GAAJ,aAAiB;AAAEO,IAAAA,OAAO,EAAPA;AAAF,GAAjB,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADT,EAECF,IAFD,CAEM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACG,KAAT;AAAA,GAFV,CADkB;AAAA,CAAf;AAKP;;AACA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACH,IAAD,EAAOI,KAAP;AAAA,SAClBT,KAAK,WAAIV,GAAJ,oBAAiBe,IAAI,CAACK,EAAtB,GAA4B;AAC7BC,IAAAA,MAAM,EAAE,KADqB;AAE7Bd,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFsB;AAM7Be,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,MAAAA,KAAK,EAALA;AAAF,KAAf;AANuB,GAA5B,CAAL,CAOGR,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,CADkB;AAAA,CAAf;AAUP;;AACA,OAAO,IAAMY,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD;AAAA,SAClBhB,KAAK,WAAIV,GAAJ,cAAkB;AACnBqB,IAAAA,MAAM,EAAE,MADW;AAEnBd,IAAAA,OAAO,oBACAA,OADA;AAEH,sBAAgB;AAFb,MAFY;AAMnBe,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEE,MAAAA,KAAK,EAALA;AAAF,KAAf;AANa,GAAlB,CAAL,CAOGf,IAPH,CAOQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAPX,EAQCF,IARD,CAQM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACG,KAAT;AAAA,GARV,CADkB;AAAA,CAAf","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n/* Generate a unique token for storing your bookshelf data on the backend server. */\r\nlet token = localStorage.token\r\nif (!token)\r\n    token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\n/* headers */\r\nconst headers = {\r\n    'Accept': 'application/json',\r\n    'Authorization': token\r\n}\r\n\r\n/* get */\r\nexport const get = (bookId) =>\r\n    fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\n/* getAll */\r\nexport const getAll = () =>\r\n    fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\n/* update */\r\nexport const update = (book, shelf) =>\r\n    fetch(`${api}/books/${book.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            ...headers,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ shelf })\r\n    }).then(res => res.json())\r\n\r\n/* search */\r\nexport const search = (query) =>\r\n    fetch(`${api}/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n            ...headers,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ query })\r\n    }).then(res => res.json())\r\n    .then(data => data.books)"]},"metadata":{},"sourceType":"module"}