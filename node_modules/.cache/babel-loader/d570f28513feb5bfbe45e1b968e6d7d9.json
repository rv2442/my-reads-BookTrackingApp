{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rahul\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rahul\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rahul\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rahul\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rahul\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rahul\\\\OneDriveSky\\\\Desktop\\\\PROJ FILES\\\\OLX\\\\BookTrackingApp\\\\src\\\\App.js\";\nimport React from 'react'; // import * as BooksAPI from './BooksAPI'\n\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport * as BooksAPI from \"./BooksAPI\";\nimport ListBooks from \"./ListBooks\";\nimport SearchBooks from \"./SearchBooks\";\n\nvar BooksApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BooksApp, _React$Component);\n\n  function BooksApp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BooksApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BooksApp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      books: []\n    };\n    _this.shelves = [{\n      key: 'currentlyReading',\n      name: 'Currently Reading'\n    }, {\n      key: 'wantToRead',\n      name: 'Want to Read'\n    }, {\n      key: 'read',\n      name: 'Read'\n    }];\n\n    _this.ChangeShelf = function (book, shelf) {\n      BooksAPI.update(book, shelf).then(function (books) {\n        // if the book is new then add it to the state, and it's not changed to none\n        if (book.shelf === 'none' && shelf !== 'none') {\n          _this.setState(function (state) {\n            var newBooks = state.books.concat(book);\n            return {\n              books: newBooks\n            };\n          });\n        }\n\n        var updatedBooks = _this.state.books.map(function (c) {\n          // if it's already in the state, then change it's shelf\n          if (c.id === book.id) {\n            c.shelf = shelf;\n          }\n\n          return c;\n        });\n\n        _this.setState({\n          books: updatedBooks\n        }); // if 'none' shelve is chosen, then remove that book from the state\n\n\n        if (shelf === 'none') {\n          _this.setState(function (state) {\n            var newBooks = state.books.filter(function (deleteBook) {\n              return deleteBook.id !== book.id;\n            });\n            return {\n              books: newBooks\n            };\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BooksApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      BooksAPI.getAll().then(function (books) {\n        _this2.setState({\n          books: books\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var books = this.state.books;\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/search\",\n        render: function render() {\n          return React.createElement(SearchBooks, {\n            books: books,\n            onChangeShelf: _this3.ChangeShelf,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render() {\n          return React.createElement(ListBooks, {\n            books: books,\n            shelves: _this3.shelves,\n            onChangeShelf: _this3.ChangeShelf,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BooksApp;\n}(React.Component);\n\nexport default BooksApp;","map":{"version":3,"sources":["C:\\Users\\Rahul\\OneDriveSky\\Desktop\\PROJ FILES\\OLX\\BookTrackingApp\\src\\App.js"],"names":["React","Route","BooksAPI","ListBooks","SearchBooks","BooksApp","state","books","shelves","key","name","ChangeShelf","book","shelf","update","then","setState","newBooks","concat","updatedBooks","map","c","id","filter","deleteBook","getAll","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\n// import * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport { Route } from 'react-router-dom'\r\nimport * as BooksAPI from \"./BooksAPI\"\r\nimport ListBooks from \"./ListBooks\"\r\nimport SearchBooks from \"./SearchBooks\"\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books : []\r\n  }\r\n\r\n  componentDidMount() {\r\n    BooksAPI.getAll().then((books) => {\r\n      this.setState({ books })\r\n    })\r\n  }\r\n\r\n  shelves = [\r\n    {key:'currentlyReading' , name: 'Currently Reading'},\r\n    {key:'wantToRead' , name: 'Want to Read'},\r\n    {key:'read' , name: 'Read'},\r\n  ]\r\n\r\n  ChangeShelf = (book, shelf) => {\r\n    BooksAPI.update(book, shelf).then(books => {\r\n      // if the book is new then add it to the state, and it's not changed to none\r\n      if(book.shelf === 'none' && shelf !== 'none'){\r\n        this.setState(state => {\r\n          const newBooks = state.books.concat(book);\r\n          return {books: newBooks}\r\n        })\r\n      }\r\n\r\n      const updatedBooks = this.state.books.map(c => {\r\n        // if it's already in the state, then change it's shelf\r\n        if (c.id === book.id) {\r\n          c.shelf = shelf\r\n        }\r\n        return c;\r\n      });\r\n\r\n      this.setState({\r\n        books: updatedBooks,\r\n      });\r\n      \r\n        // if 'none' shelve is chosen, then remove that book from the state\r\n        if(shelf === 'none'){\r\n          this.setState(state=>{\r\n            const newBooks = state.books.filter(deleteBook => deleteBook.id !== book.id);\r\n            return {books: newBooks}\r\n          })\r\n        }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { books } = this.state;\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <Route path='/search'\r\n        render={() => (\r\n          <SearchBooks books={books} onChangeShelf={this.ChangeShelf} />\r\n        )}\r\n        />\r\n\r\n        <Route exact path='/'\r\n        render={() => (\r\n          <ListBooks books={books} shelves={this.shelves} onChangeShelf={this.ChangeShelf} />\r\n        )}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default BooksApp\r\n"]},"metadata":{},"sourceType":"module"}